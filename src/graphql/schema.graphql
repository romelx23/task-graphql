type Query {
  hello: String!
  getPerson(name: String, age: Int): String
  getInt(age: Int!): Int
  getFloat(price: Float): Float
  getString: String
  getBoolean: Boolean
  getID: ID
  getNumbers(numbers: [Int!]!): [Int]
  #   product
  #   getProduct: Product
  #   getProducts: [Product]
  product(id: ID!): Product!
  products: [Product!]!
  category(id: ID!): Category!
  task(id: ID!): Task!
  tasks: [Task!]!
}

type Mutation {
  login(email: String!, password: String!): AuthResponse!
  addProduct(dto: CreateProductDto!): Product
  updateProduct(id: ID!, dto: UpdateProductDto!): Product
  deleteProduct(id: ID!): ID
  addCategory(dto: CreateCategoryDto): Category
  addTask(dto: CreateTaskDto!): Task
  updateTask(id: ID!, dto: UpdateTaskDto!): Task
  deleteTask(id: ID!): ID
}

type Product {
  id: ID!
  name: String!
  price: Float!
  description: String!
  image: String!
  createdAt: String!
  categoryId: ID!
  category: Category!
}

type Category {
  id: ID!
  name: String!
  image: String!
  products: [Product!]!
}

input CreateProductDto {
  name: String!
  price: Int!
  description: String!
  image: String!
  categoryId: ID!
}

input UpdateProductDto {
  name: String
  price: Int
  description: String
  image: String
  categoryId: ID
}

type AuthResponse {
  access_token: String!
  user: User!
}

type User {
  id: ID!
  name: String!
  email: String!
  role: String!
  createdAt: String!
}

input CreateCategoryDto {
  name: CategoryNameType!
  image: URL!
}

scalar CategoryNameType

type Task {
  id: ID!
  title: String!
  description: String!
  color: String!
  favorite: Boolean!
  status: String!
  createdAt: String!
}

input CreateTaskDto {
  title: String!
  description: String!
  status: String!
  color: String!
  favorite: Boolean!
}

input UpdateTaskDto {
  title: String
  description: String
  status: String
  color: String
  favorite: Boolean
}
